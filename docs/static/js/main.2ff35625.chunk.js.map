{"version":3,"sources":["context/index.js","constants/languagePack/index.js","constants/languagePack/en.js","constants/languagePack/ko.js","components/MainPagePhrase/index.js","constants/urls.js","components/LoginButton/index.js","pages/landing/index.js","components/GithubUserProfile/index.js","components/DashboardSeparator/index.js","components/CommitItem/index.js","components/RepoItem/index.js","store/actions/repos/index.js","store/actions/user/index.js","store/actions/commits/index.js","pages/dashboard/index.js","constants/routes.js","history/index.js","pages/notFound/index.js","App.js","serviceWorker.js","store/reducers/repos/index.js","store/reducers/user/index.js","store/reducers/commits/index.js","store/reducers/index.js","util/index.js","store/sagas/repos/index.js","store/sagas/user/index.js","store/sagas/commits/index.js","store/sagas/index.js","index.js"],"names":["LocaleContext","React","createContext","withLocale","Component","props","react_default","a","createElement","Consumer","locale","Object","assign","languagePack","en","landingPage","loginButton","ko","_ref","SERVER_HOST","href","concat","LandingPage","components_MainPagePhrase","components_LoginButton","GithubUserProfile","memo","profileInfo","avatarUrl","name","totalRepos","totalCommits","className","alt","src","DashboardSeparator","CommitItem","commitInfo","hash","message","repoPath","commitLink","stat","number","PropTypes","string","RepoItem","isRequired","owner","repoId","id","commits","fetchCommits","userId","_useState","useState","_useState2","slicedToArray","listVisibility","setListVisibility","dataKey","data","repoClassName","onClick","map","commit","components_CommitItem","key","FETCH_REPOS_REQUEST","fetchReposSuccess","repos","type","payload","fetchReposFail","FETCH_USER_REQUEST","fetchUserSuccess","user","fetchUserFail","FETCH_COMMITS_REQUEST","fetchCommitsSuccess","fetchCommitsFail","mapDispatchToProps","fetchReposRequest","fetchUserRequest","userName","fetchCommitsRequest","routes","path","component","compose","withRouter","connect","state","match","useEffect","params","components_GithubUserProfile","components_DashboardSeparator","repo","components_RepoItem","createBrowserHistory","NotFound","App","window","navigator","language","Router","history","Provider","value","this","Switch","route","Route","exact","Boolean","location","hostname","initialState","reposReducer","arguments","length","undefined","action","email","token","userReducer","objectSpread","commitsReducer","_action$payload","defineProperty","combineReducers","fetchWithErrorHandling","_ref2","asyncToGenerator","regenerator_default","mark","_callee","url","_ref$method","method","_ref$options","options","response","json","wrap","_context","prev","next","fetch","sent","ok","FetchResponseError","abrupt","stop","_x","apply","Error","status","statusText","GET","_ref3","fetchRepos","watchReposFetch","call","put","t0","_marked","_context2","takeLatest","_marked2","fetchUser","watchUserFetch","user_marked","user_marked2","watchCommitsFetch","commits_marked","takeEvery","commits_marked2","rootSaga","all","sagas_marked","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","reducer","applyMiddleware","sagaMiddleware","run","ReactDOM","render","es","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ff35625.chunk.js","sourcesContent":["import React from 'react';\n\nconst LocaleContext = React.createContext();\nconst withLocale = (Component) => (props) => (\n  <LocaleContext.Consumer>\n    {locale => <Component {...props} locale={locale}/>}\n  </LocaleContext.Consumer>\n);\n\nexport { LocaleContext, withLocale };\n\n","import en from './en';\nimport ko from './ko';\n\nexport default {\n  en,\n  ko,\n};\n\n","export default {\n  landingPage: 'Collect your commits scattered over open source projects.',\n  loginButton: 'Getting started with GitHub account',\n}\n\n","export default {\n  landingPage: '여기 저기 흩어진 오픈 소스 커밋을 한 곳에서 확인해 보세요.',\n  loginButton: 'GitHub 계정으로 시작하기',\n};\n\n","import React from 'react';\nimport { withLocale } from 'context';\nimport languagePack from 'constants/languagePack';\n\nconst MainPagePhrase = ({ locale }) => {\n  return (\n    <h1>{languagePack[locale]['landingPage']}</h1>\n  );\n};\n\nexport default withLocale(MainPagePhrase);\n\n","export const SERVER_HOST = process.env.NODE_ENV === 'production' ? 'https://committrs.io' : 'http://localhost:8000';\n\n","import React from 'react';\nimport { withLocale } from 'context';\nimport languagePack from 'constants/languagePack';\nimport { SERVER_HOST } from 'constants/urls';\n\nconst LoginButton = ({ locale }) => {\n  return (\n    <a\n      href={`https://github.com/login/oauth/authorize?client_id=435deb42a14081c0a9bf&redirect_uri=${SERVER_HOST}/auth/github/token`}\n    >\n      {languagePack[locale]['loginButton']}\n    </a>\n  );\n};\n\nexport default withLocale(LoginButton);\n\n","import React from 'react';\nimport MainPagePhrase from 'components/MainPagePhrase';\nimport LoginButton from 'components/LoginButton';\n\nconst LandingPage = () => {\n  return (\n    <div>\n      <MainPagePhrase/>\n      <LoginButton />\n    </div>\n  );\n};\n\nexport default LandingPage;\n\n","import React from 'react';\nimport { shape, string } from 'prop-types';\n\nimport './GithubUserProfile.css';\n\nconst GithubUserProfile = React.memo(({ profileInfo }) => {\n  const { avatarUrl, name, totalRepos, totalCommits } = profileInfo;\n\n  return (\n    <div className='github-profile'>\n      <img alt='github user profile' src={avatarUrl} />\n      <div className='container'>\n        <div className='name'>{name}</div>\n        <div>{`${name} has total ${totalCommits} commits in ${totalRepos} repositories`}</div>\n      </div>\n    </div>\n  );\n});\n\nGithubUserProfile.propTypes = {\n  profileInfo: shape({\n    avatarUrl: string.isRequired,\n    userName: string.isRequired,\n  }),\n};\n\nexport default GithubUserProfile;\n\n","import React from 'react';\n\nimport './DashboardSeparator.css';\n\nconst DashboardSeparator = ({ name }) => {\n  return name &&\n    <div className='dashboard-separator'>\n      {`${name}'s open source contributions`}\n    </div>\n};\n\nexport default DashboardSeparator;\n\n","import React from 'react';\nimport { shape, string } from 'prop-types';\n\nimport './CommitItem.css';\n\nconst CommitItem = ({ commitInfo }) => {\n  const { hash, message, repoPath, stat } = commitInfo;\n  const commitLink = `https://github.com/${repoPath}/commit/${hash}`;\n\n  return (\n    <div className='commit'>\n      <p>\n        <a href={commitLink}>{hash}</a>\n      </p>\n      <p>{message}</p>\n      <p>\n        {/*<span>{stat.addition}</span>*/}\n        {/*<span>{stat.addition}</span>*/}\n      </p>\n    </div>\n  );\n};\n\nconst positiveNumberValidator = (props, propName, componentName) => {\n  const prop = props[propName];\n  if(!props[propName] || typeof prop !== 'number' || prop < 0) {\n    return new Error(`Invalid prop: ${propName}, this should be bigger than 0.`)\n  }\n};\n\nCommitItem.propTypes = {\n  commitInfo: shape ({\n    repoPath: string.isRequired,\n    hash: string.isRequired,\n    message: string.isRequired,\n    stat: shape({\n      addition: positiveNumberValidator,\n      deletion: positiveNumberValidator,\n    }),\n  }).isRequired,\n};\n\nexport default CommitItem;\n\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport CommitItem from '../CommitItem';\n\nimport './RepoItem.css';\n\nconst RepoItem = ({ owner, name, id: repoId, totalCommits, commits, fetchCommits, userId }) => {\n  const [listVisibility, setListVisibility] = useState(false);\n  const repoPath = `${owner}/${name}`;\n  const dataKey = `${userId}/${repoId}`;\n  const data = commits[dataKey] ? commits[dataKey].commits : [];\n\n  const onRepoClick = () => {\n    if(!listVisibility) fetchCommits(userId, repoId);\n    setListVisibility(!listVisibility)\n  };\n\n  const repoClassName = 'repo ' + (listVisibility ? 'visible' : '');\n\n  return (\n    <div className={repoClassName}>\n      <div className='repo-title' onClick={onRepoClick}>{repoPath}</div>\n      <div className='repo-commits-count'>{`${totalCommits} commits`}</div>\n      {listVisibility &&\n          <div className='commit-container'>\n            <div></div>\n            <div>\n              {data.map((commit) => {\n                commit.repoPath = repoPath;\n                return <CommitItem key={commit.hash} commitInfo={commit} />;\n              })}\n            </div>\n          </div>\n      }\n    </div>\n  );\n};\n\nconst { number, string } = PropTypes;\nexport const repoShape = {\n  owner: string.isRequired,\n  name: string.isRequired,\n  id: number.isRequired,\n  totalCommits: number.isRequired,\n  userId: number.isRequired,\n};\n\nRepoItem.propTypes = repoShape;\n\nexport default RepoItem;\n\n","export const FETCH_REPOS_SUCCESS = 'FETCH_REPOS_SUCCESS';\nexport const FETCH_REPOS_REQUEST = 'FETCH_REPOS_REQUEST';\nexport const FETCH_REPOS_FAIL = 'FETCH_REPOS_FAIL';\n\nexport const fetchReposSuccess = (repos) => ({\n  type: FETCH_REPOS_SUCCESS,\n  payload: {\n    repos,\n  },\n});\n\nexport const fetchReposRequest = (userId) => ({\n  type: FETCH_REPOS_REQUEST,\n  payload: {\n    userId,\n  },\n});\n\nexport const fetchReposFail = () => ({\n  type: FETCH_REPOS_FAIL,\n});\n\n","export const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\nexport const FETCH_USER_REQUEST = 'FETCH_USER_REQUEST';\nexport const FETCH_USER_FAIL = 'FETCH_USER_FAIL';\n\nexport const fetchUserSuccess = (user) => ({\n  type: FETCH_USER_SUCCESS,\n  payload: {\n    user,\n  },\n});\n\nexport const fetchUserRequest = (userName) => ({\n  type: FETCH_USER_REQUEST,\n  payload: {\n    userName,\n  },\n});\n\nexport const fetchUserFail = () => ({\n  type: FETCH_USER_FAIL,\n});\n\n","export const FETCH_COMMITS_SUCCESS = 'FETCH_COMMITS_SUCCESS';\nexport const FETCH_COMMITS_REQUEST = 'FETCH_COMMITS_REQUEST';\nexport const FETCH_COMMITS_FAIL = 'FETCH_COMMITS_FAIL';\n\nexport const fetchCommitsSuccess = (userId, repoId, commits) => ({\n  type: FETCH_COMMITS_SUCCESS,\n  payload: {\n    userId,\n    repoId,\n    commits,\n  },\n});\n\nexport const fetchCommitsRequest = (userId, repoId) => ({\n  type: FETCH_COMMITS_REQUEST,\n  payload: {\n    userId,\n    repoId,\n  },\n});\n\nexport const fetchCommitsFail = () => ({\n  type: FETCH_COMMITS_FAIL,\n});\n\n","import React, { useEffect } from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport GithubUserProfile from 'components/GithubUserProfile';\nimport DashboardSeparator from 'components/DashboardSeparator';\nimport RepoItem from 'components/RepoItem';\nimport { fetchReposRequest } from 'store/actions/repos';\nimport { fetchUserRequest } from 'store/actions/user';\nimport { fetchCommitsRequest } from 'store/actions/commits';\n\nimport './dashboard.css';\n\nconst DashboardPage = ({ profileInfo, repos, commits, match, fetchReposRequest, fetchUserRequest, fetchCommitsRequest }) => {\n  useEffect(() => {\n    fetchUserRequest(match.params.userName);\n  }, []);\n\n  useEffect(() => {\n    if(profileInfo.id === 0) return;\n    fetchReposRequest(profileInfo.id);\n  }, [profileInfo.id]);\n\n  return (\n    <div className='dashboard'>\n      <GithubUserProfile\n        profileInfo={profileInfo}\n      />\n      <DashboardSeparator\n        name={profileInfo.name}\n      />\n      <div className='repo-container'>\n        {repos.map((repo) => (\n          <RepoItem\n            key={repo.id}\n            fetchCommits={fetchCommitsRequest}\n            userId={profileInfo.id}\n            commits={commits}\n            {...repo} \n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  profileInfo: state.user,\n  repos: state.repos,\n  commits: state.commits,\n});\n\nconst mapDispatchToProps = {\n  fetchReposRequest,\n  fetchUserRequest,\n  fetchCommitsRequest,\n};\n\nexport default compose(\n  withRouter,\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  ),\n)(DashboardPage);\n\n","import React from 'react';\nimport LandingPage from 'pages/landing';\nimport DashboardPage from 'pages/dashboard';\n\nexport default [\n  {\n    path: '/',\n    component: LandingPage,\n  },\n  {\n    path: '/rank',\n    component: () => <div />,\n  },\n  {\n    path: '/:userName',\n    component: DashboardPage,\n  },\n];\n\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n\n","import React from 'react';\n\nconst NotFound = () => {\n  return (\n    <div>\n      NOT FOUND\n    </div>\n  );\n};\n\nexport default NotFound;\n\n","import React, { Component } from 'react';\nimport { Route, Router, Switch } from 'react-router-dom';\nimport routes from './constants/routes';\nimport { LocaleContext } from 'context';\nimport history from './history';\nimport NotFound from './pages/notFound';\n\nimport 'App.css';\n\nclass App extends Component {\n  state = {\n    locale: window.navigator.language === 'ko-KR' ? 'ko' : 'en',\n  }\n\n  render() {\n    return (\n      <Router history={history}>\n        <LocaleContext.Provider value={this.state.locale}>\n          <div className='app'>\n            <Switch>\n              {routes.map((route) => {\n                return <Route key={route.path} path={route.path} component={route.component} exact />;\n              })}\n              <Route component={NotFound} />\n            </Switch>\n          </div>\n        </LocaleContext.Provider>\n      </Router>\n    );\n  }\n}\n\nexport { LocaleContext };\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_REPOS_SUCCESS } from 'store/actions/repos';\n\nconst initialState = [];\n\nconst reposReducer = (state = initialState, action) => {\n  switch(action.type) {\n    case FETCH_REPOS_SUCCESS:\n      return action.payload.repos;\n    default:\n      return state;\n  }\n};\n\nexport default reposReducer;\n\n","import { FETCH_USER_SUCCESS } from 'store/actions/user';\n\nconst initialState = {\n  id: 0,\n  name: '',\n  email: '',\n  token: '',\n  avatarUrl: '',\n};\n\nconst userReducer = (state = initialState, action) => {\n  switch(action.type) {\n    case FETCH_USER_SUCCESS:\n      return {\n        ...state,\n        ...action.payload.user,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n\n","import { FETCH_COMMITS_SUCCESS } from 'store/actions/commits';\n\nconst initialState = {};\n\nconst commitsReducer = (state = initialState, action) => {\n  switch(action.type) {\n    case FETCH_COMMITS_SUCCESS:\n      const { userId, repoId, commits } = action.payload;\n      return {\n        ...state,\n        [`${userId}/${repoId}`]: commits,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default commitsReducer;\n\n","import { combineReducers } from 'redux';\nimport repos from './repos'\nimport user from './user'\nimport commits from './commits'\n\nexport default combineReducers({\n  repos,\n  user,\n  commits,\n});\n\n","const fetchWithErrorHandling = async ({ url, method = 'GET', options = {}}) => {\n  const response = await fetch(url, {\n    ...options,\n    method,\n  });\n  if(!response.ok) throw new FetchResponseError(response);\n\n  const json = await response.json();\n  return json;\n};\n\nconst FetchResponseError = (response) => {\n  return new Error(`${response.status} ${response.statusText} - ${response.url}`);\n}\n\nexport const GET = ({ url, options }) => fetchWithErrorHandling({ url, options });\nexport const POST = ({ url, options }) => fetchWithErrorHandling({ url, options, method: 'POST' });\n\n","import { takeLatest, call, put } from 'redux-saga/effects';\nimport { FETCH_REPOS_REQUEST, fetchReposFail, fetchReposSuccess } from 'store/actions/repos';\nimport { GET } from '../../../util';\nimport { SERVER_HOST } from 'constants/urls';\n\nexport function* fetchRepos(action) {\n  const url = `${SERVER_HOST}/api/repos/${action.payload.userId}`;\n  try {\n    const repos = yield call(GET, { url });\n    yield put(fetchReposSuccess(repos));\n  } catch(e) {\n    yield put(fetchReposFail());\n  }\n};\n\nexport function* watchReposFetch() {\n  yield takeLatest(FETCH_REPOS_REQUEST, fetchRepos);\n};\n\n","import { takeLatest, call, put } from 'redux-saga/effects';\nimport { FETCH_USER_REQUEST, fetchUserSuccess, fetchUserFail } from 'store/actions/user';\nimport { GET } from '../../../util';\nimport { SERVER_HOST } from 'constants/urls';\n\nexport function* fetchUser(action) {\n  try {\n    const user = yield call(GET, { url: `${SERVER_HOST}/api/user/${action.payload.userName}` });\n    yield put(fetchUserSuccess(user));\n  } catch(e) {\n    yield put(fetchUserFail());\n  }\n};\n\nexport function* watchUserFetch() {\n  yield takeLatest(FETCH_USER_REQUEST, fetchUser);\n};\n\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport { FETCH_COMMITS_REQUEST, fetchCommitsFail, fetchCommitsSuccess } from 'store/actions/commits';\nimport { GET } from '../../../util';\nimport { SERVER_HOST } from 'constants/urls';\n\nexport function* fetchCommits(action) {\n  const { userId, repoId } = action.payload;\n  const url = `${SERVER_HOST}/api/commits/${userId}/${repoId}`;\n\n  try {\n    const commits = yield call(GET, { url });\n    yield put(fetchCommitsSuccess(userId, repoId, commits));\n  } catch(e) {\n    yield put(fetchCommitsFail());\n  }\n};\n\nexport function* watchCommitsFetch() {\n  yield takeEvery(FETCH_COMMITS_REQUEST, fetchCommits);\n};\n\n","import { all } from 'redux-saga/effects';\nimport createSagaMiddleware from 'redux-saga';\nimport { watchReposFetch } from './repos';\nimport { watchUserFetch } from './user';\nimport { watchCommitsFetch } from './commits';\n\nexport function* rootSaga() {\n  yield all([\n    watchReposFetch(),\n    watchUserFetch(),\n    watchCommitsFetch(),\n  ]);\n};\n\nexport default createSagaMiddleware();\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducers';\nimport sagaMiddleware, { rootSaga } from './store/sagas';\n\n// redux-devtools setup\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducer,\n  composeEnhancers(\n    applyMiddleware(sagaMiddleware),\n  ),\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}